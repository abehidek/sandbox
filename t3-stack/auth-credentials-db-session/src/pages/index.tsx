import type { NextPage } from "next";
import { useSession, signIn, signOut } from "next-auth/react";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useForm } from "react-hook-form";

const Home: NextPage = () => {
  const {
    data: secretMessageData,
    refetch: refetchSecretMessage,
    isError: isErrorSecretMessage,
    error: errorSecretMessage,
  } = trpc.useQuery(["auth.getSecretMessage"], {
    enabled: false,
    retry: false,
  });

  const { data: allExample, refetch: refetchGetAll } = trpc.useQuery(
    ["example.getAll"],
    {}
  );

  const { data: session } = useSession();

  const { mutate: changePassword } = trpc.useMutation(["user.changePassword"], {
    onSuccess: () => alert("Sent request to change pwd"),
  });

  type ChangePassword = {
    password: string;
  };

  const {
    register: registerChangePasswordField,
    handleSubmit: handleChangePasswordSubmit,
  } = useForm<ChangePassword>();

  const onSubmitChangePassword = handleChangePasswordSubmit((data) =>
    changePassword(data)
  );

  const { mutate: addOne } = trpc.useMutation(["example.addOne"], {
    onSuccess: () => alert("Succefully created new one"),
  });

  type AddOne = {
    name: string;
    description: string;
  };

  const { register: registerAddOneField, handleSubmit: handleAddOneSubmit } =
    useForm<AddOne>();

  const onSubmitAddOne = handleAddOneSubmit((data) => addOne(data));

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <div className="border-2 p-5 flex flex-col items-center justify-center">
          <div className="text-2xl text-blue-500 flex justify-center items-center w-full">
            {secretMessageData ? (
              <p>{secretMessageData}</p>
            ) : isErrorSecretMessage ? (
              <p>{errorSecretMessage.message}</p>
            ) : (
              <p>Click below</p>
            )}
          </div>
          <button
            onClick={() => refetchSecretMessage()}
            className="bg-blue-500 text-white px-5 py-3"
          >
            fetch from trpc
          </button>
        </div>

        <div className="mt-5 border-2 p-5 flex flex-col items-center justify-center">
          <h1>Auth</h1>
          {session ? (
            <>
              <button
                onClick={() => signOut()}
                className="bg-blue-500 text-white px-3 py-3 mt-2"
              >
                Sign Out - {session.user?.name}
              </button>
            </>
          ) : (
            <>
              <button
                onClick={() => signIn("github")}
                className="bg-blue-500 text-white px-3 py-3 mt-2"
              >
                Sign In With Github
              </button>
              <button
                onClick={() => signIn()}
                className="bg-blue-500 text-white px-3 py-3 mt-2"
              >
                Sign In With Email
              </button>
            </>
          )}
        </div>
        <div className="mt-5 border-2 p-5 flex flex-col items-center justify-center">
          <form onSubmit={onSubmitChangePassword}>
            <input
              type="password"
              {...registerChangePasswordField("password")}
            />
            <input
              className="bg-green-500 text-white px-3 py-3 mt-2"
              type="submit"
              value="Change password"
            />
          </form>
        </div>

        <div className="mt-5 border-2 p-5 flex flex-col items-center justify-center">
          <pre>{JSON.stringify(allExample, null, 2)}</pre>

          <form onSubmit={onSubmitAddOne}>
            <input
              type="text"
              {...registerAddOneField("name")}
              placeholder="name..."
            />
            <input
              type="text"
              {...registerAddOneField("description")}
              placeholder="description..."
            />
            <input
              className="bg-green-500 text-white px-3 py-3 mt-2"
              type="submit"
              value="Add todo"
            />
          </form>
        </div>
      </main>
    </>
  );
};

export default Home;
